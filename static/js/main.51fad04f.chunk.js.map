{"version":3,"sources":["components/TextForm.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","_useState","useState","_useState2","_slicedToArray","text","setText","handleup","event","console","log","target","value","React","createElement","Fragment","className","style","color","mode","heading","id","rows","onChange","backgroundColor","disabled","length","type","onClick","newText","toUpperCase","showAlert","text2","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","split","filter","element","Navbar","concat","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","toggleMode","role","htmlFor","defaultProps","aboutText","Alert","height","alert","word","lower","charAt","slice","capitalize","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"mMAIe,SAASA,EAASC,GAAO,IAAAC,EACZC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAWdI,EAAU,SAACC,GACbC,QAAQC,IAAI,YACZJ,EAAQE,EAAMG,OAAOC,QAsB3B,OACEC,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,OAAKE,UAAU,YAAYC,MAAO,CAACC,MAAmB,SAAblB,EAAMmB,KAAc,QAAQ,UACjEN,IAAAC,cAAA,MAAIE,UAAU,QAAQhB,EAAMoB,SAC5BP,IAAAC,cAAA,OAAKE,UAAU,QACbH,IAAAC,cAAA,YAAUE,UAAU,oBAAoBK,GAAG,QAAQC,KAAK,IAAIV,MAAOP,EAAMkB,SAAUhB,EAAUU,MAAO,CAACO,gBAA6B,SAAbxB,EAAMmB,KAAc,UAAU,QAAQD,MAAmB,SAAblB,EAAMmB,KAAc,QAAQ,UAAU,MAEvMN,IAAAC,cAAA,UAAQW,SAAwB,IAAdpB,EAAKqB,OAAYC,KAAK,cAAcX,UAAU,kBAAkBY,QAtC3E,WACT,IAAIC,EAAUxB,EAAKyB,cACnBxB,EAAQuB,GACR7B,EAAM+B,UAAU,wCAAwC,aAmC6C,yBACnGlB,IAAAC,cAAA,UAAQW,SAAwB,IAAdpB,EAAKqB,OAAYC,KAAK,SAASX,UAAU,uBAAuBY,QA3B1E,WACV,IAAII,EAAQ3B,EAAK4B,cACjB3B,EAAQ0B,GACRhC,EAAM+B,UAAU,wCAAwC,aAwB8C,yBACpGlB,IAAAC,cAAA,UAAQW,SAAwB,IAAdpB,EAAKqB,OAAYC,KAAK,SAASC,QAtBzC,WACZ,IAAIM,EAAM,IAAIC,yBACdD,EAAI7B,KAAOA,EACX+B,OAAOC,gBAAgBC,MAAMJ,GAC7BlC,EAAM+B,UAAU,KAAK,YAkBgDf,UAAU,6BAA4B,SACvGH,IAAAC,cAAA,UAAQW,SAAwB,IAAdpB,EAAKqB,OAAYC,KAAK,SAASX,UAAU,sBAAsBY,QAfzE,WAEZtB,EADY,IAEZN,EAAM+B,UAAU,wBAAwB,YAY6DR,SAAUhB,GAAU,UAEvHM,IAAAC,cAAA,OAAKG,MAAO,CAACC,MAAmB,SAAblB,EAAMmB,KAAc,QAAQ,UAC9CN,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,SAAGD,IAAAC,cAAA,SAAIT,EAAKkC,MAAM,KAAKC,OAAO,SAACC,GAAY,OAAwB,IAAjBA,EAAQf,SAAaA,OAAO,cAAYrB,EAAKqB,OAAO,gBACtGb,IAAAC,cAAA,SAAGD,IAAAC,cAAA,SAAI,IAAOT,EAAKkC,MAAM,KAAKb,OAAO,iBACrCb,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIT,EAAKqB,OAAO,EAAErB,EAAK,6BCrDjB,SAASqC,EAAO1C,GAC7B,OACEa,IAAAC,cAAA,WACED,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKE,UAAS,kCAAA2B,OAAoC3C,EAAMmB,KAAI,QAAAwB,OAAO3C,EAAMmB,OACzEN,IAAAC,cAAA,OAAKE,UAAU,mBACbH,IAAAC,cAAA,KAAGE,UAAU,eAAe4B,KAAK,KAAK5C,EAAM6C,OAC5ChC,IAAAC,cAAA,UAAQE,UAAU,iBAAiBW,KAAK,SAASmB,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1LrC,IAAAC,cAAA,QAAME,UAAU,yBAElBH,IAAAC,cAAA,OAAKE,UAAU,2BAA2BK,GAAG,0BAC3CR,IAAAC,cAAA,MAAIE,UAAU,mCACZH,IAAAC,cAAA,MAAIE,UAAU,YACZH,IAAAC,cAAA,KAAGE,UAAU,kBAAkBmC,eAAa,OAAOP,KAAK,KAAI,UAUhE/B,IAAAC,cAAA,OAAKE,UAAS,oCAAA2B,OAAmD,UAAb3C,EAAMmB,KAAe,OAAO,UAChFN,IAAAC,cAAA,SAAOE,UAAU,mBAAmBY,QAAS5B,EAAMoD,WAAYzB,KAAK,WAAW0B,KAAK,SAAShC,GAAG,2BAChGR,IAAAC,cAAA,SAAOE,UAAU,mBAAmBsC,QAAQ,0BAAyB,mBAe/EZ,EAAOa,aAAe,CACpBV,MAAQ,iBACRW,UAAY,YC9BCC,MAdf,SAAezD,GAKb,OACEa,IAAAC,cAAA,OAAKG,MAAO,CAACyC,OAAO,SACnB1D,EAAM2D,OAAS9C,IAAAC,cAAA,OAAKE,UAAS,eAAA2B,OAAiB3C,EAAM2D,MAAMhC,KAAI,gCAAgC0B,KAAK,SACtGxC,IAAAC,cAAA,cAPqB,SAAC8C,GACZ,IAAMC,EAAQD,EAAK3B,cACnB,OAAO4B,EAAMC,OAAO,GAAGhC,cAAgB+B,EAAME,MAAM,GAKpDC,CAAWhE,EAAM2D,MAAMhC,OAAe,MAAI3B,EAAM2D,MAAMzB,OC+DlD+B,MA7Df,WAAe,IAAAhE,EACYC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAnCkB,EAAIhB,EAAA,GAAG+D,EAAO/D,EAAA,GAAAgE,EACEjE,mBAAS,MAAKkE,EAAAhE,YAAA+D,EAAA,GAAhCR,EAAKS,EAAA,GAACC,EAAQD,EAAA,GAEfrC,EAAY,SAACuC,EAAQ3C,GACzB0C,EAAS,CACPnC,IAAMoC,EACN3C,KAAOA,IAET4C,WAAW,WACTF,EAAS,OACR,MA6BH,OACExD,IAAAC,cAAAD,IAAAE,SAAA,KAEEF,IAAAC,cAAC4B,EAAM,CAACG,MAAM,YAAYW,UAAU,QAAQrC,KAAMA,EAAMiC,WA5BzC,WACL,UAATjC,GACD+C,EAAQ,QACRM,SAASC,KAAKxD,MAAMO,gBAAkB,OACtCO,EAAU,6BAA6B,aAcvCmC,EAAQ,SACRM,SAASC,KAAKxD,MAAMO,gBAAkB,QACtCO,EAAU,8BAA8B,eASvClB,IAAAC,cAAC2C,EAAK,CAACE,MAAOA,IACf9C,IAAAC,cAAA,OAAKE,UAAU,mBAITH,IAAAC,cAACf,EAAQ,CAACqB,QAAQ,yDAAyDD,KAAMA,EAAMY,UAAWA,OCjD/F2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWhB,SAASiB,eAAe,SACpDC,OACH7E,IAAAC,cAACD,IAAM8E,WAAU,KACf9E,IAAAC,cAACmD,EAAG,QAORS","file":"static/js/main.51fad04f.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    //text=new text; //Wrong way\r\n    //setText(new text); // correct way\r\n\r\n    const uppr = () =>{                                                                      \r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text has been Converted to Upper case\",\"success\");\r\n        \r\n    };\r\n\r\n    const handleup =(event) =>{\r\n        console.log(\"onchange\");\r\n        setText(event.target.value)\r\n    };\r\n\r\n    const lower = () => {\r\n        let text2 = text.toLowerCase();\r\n        setText(text2);\r\n        props.showAlert(\"Text has been Converted to Lower case\",\"success\");\r\n    };\r\n\r\n    const speak = () => {\r\n      let msg = new SpeechSynthesisUtterance();\r\n      msg.text = text;\r\n      window.speechSynthesis.speak(msg);\r\n      props.showAlert(null,\"success\");\r\n      \r\n    }\r\n    \r\n    const clear = () => {\r\n      let ntext = '';\r\n      setText(ntext);\r\n      props.showAlert(\"Text has been cleared\",\"success\");\r\n    }\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1 className=\"my-2\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control my-3\" id=\"mybox\" rows=\"8\" value={text} onChange={handleup} style={{backgroundColor:props.mode==='dark'?'#3c4561':'white',color:props.mode==='dark'?'white':'black'}}> </textarea>\r\n        </div>\r\n          <button disabled={text.length===0} type=\"button mb-8\" className=\"btn btn-primary\" onClick={uppr}  >Convert to Upper case</button>\r\n          <button disabled={text.length===0} type=\"button\" className=\"btn btn-primary mx-2\" onClick={lower}  >Convert to Lower case</button>\r\n          <button disabled={text.length===0} type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n          <button disabled={text.length===0} type=\"button\" className=\"btn btn-danger mx-2\" onClick={clear} onChange={handleup}>Clear</button>\r\n    </div>\r\n        <div style={{color:props.mode==='dark'?'white':'black'}}>\r\n         <h2> Your Text preview</h2>\r\n         <p><b>{text.split(\" \").filter((element)=>{ return element.length!==0}).length} words and {text.length} characters</b></p>\r\n         <p><b>{0.08 * text.split(\" \").length}min to read </b></p>\r\n         <h3>Preview</h3>\r\n         <p>{text.length>0?text:\"Nothing to Preview here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n            </li> */}\r\n          </ul>\r\n        {/*<form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch form text-${props.mode==='light'?'dark':'light'}`}> \r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes ={ title : PropTypes.string,\r\n  aboutText : PropTypes.string\r\n\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title : \"set title here\",\r\n  aboutText : \"About us\"\r\n};","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height:'60px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n    </div>}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport TextForm from './components/TextForm';\nimport Navbar from './components/Navbar';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import { \n//     BrowserRouter as Router,\n//     Routes,\n//     Route,\n//     } from \"react-router-dom\";\n\nfunction App() {\n  const [mode , setMode] = useState('light')\nconst [alert,setAlert] = useState(null);\n\nconst showAlert = (message,type) =>{\n  setAlert({\n    msg : message,\n    type : type \n  });\n  setTimeout(() => {\n    setAlert(null)\n  }, 3000);\n}\n\n\n  const toggleMode = () =>{\n    if(mode === 'light' ){\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode has been enabled\",\"success\")\n      //document.title = \"TextUtils-Dark Mode\";\n      \n      /*\n      setInterval(() => {\n        document.title = \"TextUtils-is amazing\";\n      },2000 );\n      setInterval(() => {\n        document.title = \" Install TextUtils now\";\n      },1800 );\n    \n    */\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      //document.title = \"TextUtils-Light Mode\";\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} /> \n       <Alert alert={alert}/>\n      <div className=\"container my-13\">\n        \n          {/* <Routes>\n            <Route path=\"/about\" element={<About/>}> */}\n            <TextForm heading=\" Try Yash's TextUtils- Word Counter, Character Counter\" mode={mode} showAlert={showAlert}/>\n              \n          \n          {/* </Routes> */}\n        \n      </div> \n    {/* </Router> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}